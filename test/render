#!/usr/bin/env node

var width = 960,
    height = 500,
    projectionName = process.argv[2],
    projectionSymbol = "geo" + projectionName[0].toUpperCase() + projectionName.slice(1);

if (!/^[a-z0-9]+$/i.test(projectionName)) throw new Error;

var fs = require("fs"),
    topojson = require("topojson"),
    Canvas = require("canvas"),
    d3_geo = require("d3-geo"),
    d3_composite = require("../");

var canvas = new Canvas(width, height),
    context = canvas.getContext("2d");

var world = require("./data/us-10m.json"),
    graticule = d3_geo.geoGraticule(),
outline = {type: "Sphere"};

var path = d3_geo.geoPath()
    .projection(d3_composite[projectionSymbol]().precision(0.1))
    .context(context);

context.fillStyle = "#fff";
context.fillRect(0, 0, width, height);
context.save();

context.beginPath();
path(topojson.feature(world, world.objects.land));
context.fillStyle = "#000";
context.fill();

context.beginPath();
path(graticule());
context.strokeStyle = "rgba(119,119,119,0.5)";
context.stroke();

context.restore();


context.beginPath();
path(outline);
context.strokeStyle = "#00F";
context.stroke();
/*
context.beginPath();
context.strokeStyle = "#F00";
path(d3_composite[projectionSymbol]().getCompositionBorders());
context.stroke();*/

console.warn("â†³ test/output/" + projectionName + ".png");
canvas.pngStream().pipe(fs.createWriteStream("test/output/" + projectionName + ".png"));
